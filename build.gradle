group 'hale'
version '0.7.1'

apply plugin: 'java'
apply plugin: 'application'

sourceCompatibility = 1.8
mainClassName = 'net.sf.hale.Game'

project.ext {
    // get operating system (org.gradle.nativeplatform is still incubating)
    osName = org.gradle.internal.os.OperatingSystem.current().getFamilyName()
    // assets path
    assetsPath = "$projectDir/assets"
    // distribution path
    distributionPath = "$buildDir/dist"

    // desired LWJGL 2.x version
    lwjglVersion = '2.9.1'
    // LWJGL platform binary name
    lwjglPlatformJar = "lwjgl-platform-${lwjglVersion}-natives-${osName}.jar"
    // JInput platform binary name (version number may need to be adapted if version of LWJGL is changed)
    jinputPlatformJar = "jinput-platform-2.0.5-natives-${osName}.jar"

    // native library path
    nativePath = "${distributionPath}/lib/native"

    // gets the short SHA of the last commit and the information if there are uncommitted changes (-M indicating that there is a modification)
    gitRevision = 'git rev-parse --short HEAD'.execute().text.trim() + ('git diff-index --quiet HEAD --'.execute().waitFor() == 1 ? '-M' : '')
    // get current time and date in a fixed format
    def dateFormat = new java.text.SimpleDateFormat('yyyy-MM-dd HH:mm:ss Z')
    creationDate = dateFormat.format(new Date())

    isRelease = false
}

repositories {
    mavenCentral()
}

dependencies {
    compile files('lib/twl.jar') // TWL not available on Maven Central
    compile "org.lwjgl.lwjgl:lwjgl:$lwjglVersion"
    compile 'net.minidev:json-smart:1.0.9'
    compile 'xpp3:xpp3:1.1.4c'
    compile 'org.jetbrains:annotations:16.0.1'
    testCompile 'junit:junit:4.12'
}

jar {
    manifest {
        attributes(
            'Main-Class': mainClassName
        )
    }
}

task generateVersionInfo {
    description = 'Updates Version.java file in the src/main/java folder containing project version, git version, current date'
    onlyIf { isRelease }
    ext.srcFile = file("${projectDir}/src/main/java/net/sf/hale/Version.java")
    doLast {
        srcFile.write("""
package net.sf.hale;

public final class Version {
    public static final String VERSION = "$project.version";
    public static final String GIT_REVISION = "$gitRevision";
    public static final String CREATION_DATE = "$creationDate";
}
""")
    }
}

task extractNativeBinaries(type: Copy) {
    description = 'Extracts the native binaries of LWJGL for the OS.'
    from configurations.compile.filter { it.name == lwjglPlatformJar }.collect { zipTree(it) }
    from configurations.compile.filter { it.name == jinputPlatformJar }.collect { zipTree(it) }
    into nativePath
    exclude '**/META-INF/**'
}

configure( compileJava ) {
    dependsOn generateVersionInfo
}

// set library path and project dir for tasks run and test
configure([test, run]) {
    dependsOn extractNativeBinaries
    systemProperty 'java.library.path', nativePath
    workingDir assetsPath
}

task copyDependencies(type: Copy) {
    group = 'distribution'
    description = 'Copies all compile dependencies except the ..-platform-..natives.jar into distribution/lib folder'
    from configurations.compile.filter {
        !it.name.contains('-platform-')
    }
    into "$distributionPath/lib"
}

task release(type: Copy) {
    group = 'distribution'
    description = 'Copies all assets, the jar file and the start scripts into distribution folder'
    dependsOn clean, jar, copyDependencies, extractNativeBinaries
    from assetsPath
    from jar.outputs.files
    from "${projectDir}/dist/start.bat"
    into distributionPath
}

// only update Version.java if we make a release
gradle.taskGraph.whenReady {taskGraph ->
    isRelease = taskGraph.hasTask(release)
}